[
  {
    "Id": "700094",
    "ThreadId": "279981",
    "Html": "\r\n<p>Hi there,</p>\r\n<p>I tried to use this rendering engine, but I noticed that it incorrectly renders strokes with line joins and line caps set to non-default values (e.g. round ones).&nbsp;</p>\r\n<p>So I created a bit of a fix for that. Please consider it for inclusion (but notice that it only addresses the situation where the caps and joins are defined to be round).</p>\r\n<p>The fix is in <strong>SvgVisualElements.cs</strong>, starting from line 121 and looks like this</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">protected</span> <span style=\"color:blue\">internal</span> <span style=\"color:blue\">virtual</span> <span style=\"color:blue\">void</span> RenderStroke(SvgRenderer renderer) {           \r\n\r\n\t<span style=\"color:blue\">if</span> (<span style=\"color:blue\">this</span>.Stroke != <span style=\"color:blue\">null</span>) {               \r\n\t\t<span style=\"color:blue\">float</span> strokeWidth = <span style=\"color:blue\">this</span>.StrokeWidth.ToDeviceValue(<span style=\"color:blue\">this</span>);               \r\n\t\t<span style=\"color:blue\">using</span> (<span style=\"color:blue\">var</span> pen = <span style=\"color:blue\">new</span> Pen(<span style=\"color:blue\">this</span>.Stroke.GetBrush(<span style=\"color:blue\">this</span>, <span style=\"color:blue\">this</span>.StrokeOpacity), strokeWidth)) {                   \r\n\r\n\t\t\t<span style=\"color:#ff0000\"><strong>if (StrokeLineCap == SvgStrokeLineCap.Round) {                       \r\n\t\t\t\tpen.StartCap = LineCap.Round;                       \r\n\t\t\t\tpen.EndCap = LineCap.Round;                   \r\n\t\t\t}                   \r\n\r\n\t\t\tif (StrokeLineJoin == SvgStrokeLineJoin.Round) {                       \r\n\t\t\t\tpen.LineJoin = LineJoin.Round;                   \r\n\t\t\t}</strong></span></pre>\r\n<pre>\r\n                    \t<span style=\"color:blue\">if</span> (<span style=\"color:blue\">this</span>.StrokeDashArray != <span style=\"color:blue\">null</span> &amp;&amp; <span style=\"color:blue\">this</span>.StrokeDashArray.Count &gt; 0) {                       \r\n\t\t\t\t<span style=\"color:green\">/* divide by stroke width - GDI behaviour that I don't quite understand yet.*/</span>                       \r\n\t\t\t\tpen.DashPattern = <span style=\"color:blue\">this</span>.StrokeDashArray.ConvertAll(u =&gt; u.Value / ((strokeWidth &lt;= 0) ? 1 : strokeWidth)).ToArray();                   \r\n\t\t\t}\r\n                    \trenderer.DrawPath(pen, <span style=\"color:blue\">this</span>.Path);               \r\n\t\t}           \r\n\t}       \r\n}</pre>\r\n</div>\r\n<p></p>\r\n<p>Fix is boldened and in red</p>\r\n<p>&nbsp;</p>\r\n<p>Best Regards</p>\r\n<p>kalamon</p>\r\n",
    "PostedDate": "2011-11-18T03:10:38.3-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]